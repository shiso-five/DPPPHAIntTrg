/* 
 * example to use libbabies
 * H.B. RIKEN
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include "libbabies.h"
#include "segidlist.h"

#include <CAEN_FELib.h>
#include "inttypes.h"

#define DEBUG 1

struct RawEvent{
  uint8_t *data;
  size_t  size;
  uint32_t  n_events;  
};

int InitV2740(void);

int efn = 0;
unsigned int scrbuff[32] = {0};
int usl = 1000;
uint64_t devHandle;
const char endpoint[256] = "raw";

void quit(void){
  printf("Exit\n");
}

void start(void){
  printf("Start\n");
  //  InitV2740();

  int ec;
  fprintf(stdout, "ClearData!\n");
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/cleardata");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }  
  fprintf(stdout, "DAQ start!\n");
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/armacquisition");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/swstartacquisition");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }    
}

void stop(void){
  printf("Stop\n");

  //DAQ end
  int ec;
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/swstopacquisition");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/disarmacquisition");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }
  //
  fprintf(stdout, "DAQ end!\n");    
}

void reload(void){
  printf("Reload\n");
}

void sca(void){
  int i;
  //  printf("Sca\n");
  for(i=0;i<32;i++){
    scrbuff[i] = scrbuff[i] + 1;
  }
  babies_init_ncscaler(efn);
  babies_scrdata((char *)scrbuff, sizeof(scrbuff));
  babies_end_ncscaler32();
}

void clear(void){
  // write clear function i.e. send end-of-busy pulse
  //  printf("Clear\n");
}

// thread
void evtloop(void){
  int status;
  struct RawEvent *rawEvt = NULL;
  int ec;
  char value[256];
  uint64_t PrevTimeStamp = 0; //[8 Byte]          

  fprintf(stdout, "evtloop start!\n");

  //  ec = CAEN_FELib_Open("dig2://usb:21186", &devHandle);
  fprintf(stdout, "open the connection with VX2740B.\n");
  ec = CAEN_FELib_Open("dig2://vx2740", &devHandle);  
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot open connection with device. ec : %d\n", ec);
    return;
  }

  fprintf(stdout, "reset!\n");
  ec = CAEN_FELib_SendCommand(devHandle, "/cmd/reset");
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : fail SendCommand. ec : %d\n", ec);
    return;
  }      
  
  uint64_t endPointHandle;
  char temp[256];
  sprintf(temp, "/endpoint/%s", endpoint);
  ec = CAEN_FELib_GetHandle(devHandle, temp, &endPointHandle);  
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot retrieve EndPointHandle. ec : %d\n", ec);
    return;
  }  

  //allocate RawEvent and tdata
  fprintf(stdout, "Allocate Event\n");  
  rawEvt = malloc(sizeof(struct RawEvent));
  int maxRawDataSize;
  ec = CAEN_FELib_GetValue(devHandle, "/par/MaxRawDataSize", value);
  maxRawDataSize = atoi(value);
  fprintf(stdout, "MaxRawDataSize = %d\n", maxRawDataSize);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return;
  }
  rawEvt->data = malloc(maxRawDataSize*sizeof(uint8_t));
  uint64_t *segdata;      
  segdata = (uint64_t *)malloc(maxRawDataSize*sizeof(uint8_t));  
  //v2740

  InitV2740();  

  while((status = babies_status()) != -1){
    //#ifdef DEBUG    
    //    fprintf(stdout, "babies status: %d\n", status);
    //#endif
    
    switch(status){
    case STAT_RUN_IDLE:
      /* noop */
      PrevTimeStamp = 0; //[8 Byte]              
      break;
    case STAT_RUN_START:
    case STAT_RUN_NSSTA:
      //      usleep(usl); // wait event

      ec = CAEN_FELib_HasData(endPointHandle, 1000);
      if(ec == CAEN_FELib_Success){
      }
      else if(ec == CAEN_FELib_Timeout){
	continue;
      }
      else{
	continue;
      }
      
      ec = CAEN_FELib_ReadData(endPointHandle,
//			       -1,
			       1000,
			       rawEvt->data,
			       &(rawEvt->size),
			       &(rawEvt->n_events)	
			       );

//      if(ec == CAEN_FELib_Timeout){      
//	fprintf(stderr, "<evtloop()> ERROR : CAEN_FELib_ReadData() is timeouted.\n");
//	continue;
//      }

      uint8_t format = (rawEvt->data[0]>>4);
      if(format == 3){
	fprintf(stdout, "Special Event\n");
	continue;
      }
      uint64_t aggregatedCounter = 0x0000000000000000;
      uint64_t aggregatedWords   = 0x0000000000000000;
      aggregatedCounter |= (rawEvt->data[3]);
      aggregatedCounter |= (rawEvt->data[2]<<8);
      aggregatedCounter |= (rawEvt->data[1]<<16);
      aggregatedWords   |= (rawEvt->data[7]);
      aggregatedWords   |= (rawEvt->data[6]<<8);
      aggregatedWords   |= (rawEvt->data[5]<<16);
      aggregatedWords   |= (rawEvt->data[4]<<24);

      uint64_t segdataFocusAddress=0; //[8 Byte]
//      uint64_t *segdata;      
//      segdata = (uint64_t *)malloc(sizeof(uint64_t)*aggregatedWords);
      memcpy(segdata, rawEvt->data, 8);
      segdataFocusAddress+=1;

#ifdef DEBUG
      if(aggregatedCounter<10){
	fprintf(stdout, "AggregatedCounter = %016"PRIu64" AggregatedWords = %"PRIu64"\n", aggregatedCounter, aggregatedWords);
	fprintf(stdout, "common header segdata = 0x%"PRIx64"\n", segdata[0]);
      }
#endif

      int NExtraWord    = 1; //[8 Byte] if waveform is exist, +1 (maybe)if EnStatEvents is enabled, +2
      uint64_t dataFocusAddress  = 1; //[8 Byte]
      //      uint64_t PrevTimeStamp = 0; //[8 Byte]      
      //      while(dataFocusAddress != aggregatedWords){
      while(1){      

	if(dataFocusAddress > aggregatedWords){
	  fprintf(stderr, "<evtloop()> ERROR : sum of event size is over AggregatedWords.\n");
	  break;
	}
	
	uint64_t timeStamp    = 0x0000000000000000;
	uint64_t evtSize      = 0x0000000000000000;
	uint8_t  flagWaveform = 0;
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 7]                       );
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 6]                   <<8 );
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 5]                   <<16);	
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 4]                   <<24);
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 3]                   <<32);
	timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 2]                   <<40);
	flagWaveform |= ( (rawEvt->data[8*(dataFocusAddress + 1)             ]     & 0b01000000 )>>6 );

#ifdef DEBUG
	if(aggregatedCounter<10){	
	  fprintf(stdout, "flagWaveform = %u\n", flagWaveform);
	}
#endif
	
	if(flagWaveform){
	  evtSize      |= (  rawEvt->data[8*(dataFocusAddress + 2 + NExtraWord) + 7]                   );
	  evtSize      |= ( (rawEvt->data[8*(dataFocusAddress + 2 + NExtraWord) + 6] & 0b00001111 )<<8 );
	  evtSize      += 2 + NExtraWord + 1;	  
	}
	else{
	  //	  evtSize       = 2 + NExtraWord;
	  evtSize       = 2;
#ifdef DEBUG		  
	  uint64_t *hoge0 = (uint64_t *)(rawEvt->data + 8* dataFocusAddress);
	  uint64_t *hoge1 = (uint64_t *)(rawEvt->data + 8* (dataFocusAddress+1));
	  uint64_t *hoge2 = (uint64_t *)(rawEvt->data + 8* (dataFocusAddress+2));
	  if(aggregatedCounter<10){	  
	    fprintf(stdout, "row(timestamp) = 0x%160"PRIx64"\n", *hoge0);
	    fprintf(stdout, "row(energy)    = 0x%160"PRIx64"\n", *hoge1);
	    fprintf(stdout, "row(extra)     = 0x%160"PRIx64"\n", *hoge2);
	  }
	  //	  break;
#endif
	}


#ifdef DEBUG
	if(aggregatedCounter<10){
	  fprintf(stdout, "TimeStamp = %"PRIu64" EvtSize = %"PRIu64" ", timeStamp, evtSize);
	}
#endif
	
	//babies_segdata()
	memcpy(segdata+segdataFocusAddress, rawEvt->data+8*dataFocusAddress, evtSize*8);
	segdataFocusAddress += evtSize;
	
	dataFocusAddress += evtSize;		  
	
	if(aggregatedWords == dataFocusAddress){
	  segdata[0] &= 0x00000000ffffffff;
	  segdata[0] |= segdataFocusAddress<<32;

	  babies_init_event();
	  babies_init_segment(MKSEGID(0, 0, 0, V2740));
	  babies_segdata((char *)segdata, segdataFocusAddress*8);

	  babies_end_segment();
	  babies_end_event();

	  segdataFocusAddress=1;	  	  

#ifdef DEBUG
	  if(aggregatedCounter<10){		  
	    fprintf(stdout, "babies_segdata() is done. break!\n");
	    fprintf(stdout, "dataFocusAddress = %"PRIu64"\n", dataFocusAddress);	      
	  }
#endif	  
	    
	  break;
	}
	else{
	  uint64_t nextTimeStamp    = 0x0000000000000000;
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 7]                       );
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 6]                   <<8 );
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 5]                   <<16);	
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 4]                   <<24);
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 3]                   <<32);
	  timeStamp    |= (  rawEvt->data[8* dataFocusAddress               + 2]                   <<40);
	  if(timeStamp != nextTimeStamp){
	    segdata[0] &= 0x00000000ffffffff;
	    segdata[0] |= segdataFocusAddress<<32;

	    babies_init_event();
	    babies_init_segment(MKSEGID(0, 0, 0, V2740));
	    //	    fprintf(stdout, "segdataFocusAddress = %"PRIu64"\n", segdataFocusAddress);	      	    
	    babies_segdata((char *)segdata, segdataFocusAddress*8);

	    babies_end_segment();
	    babies_end_event();

	    segdataFocusAddress=1;	  	    
	    if(aggregatedCounter<10){		  
	      fprintf(stdout, "babies_segdata() is done.\n");
	      fprintf(stdout, "dataFocusAddress = %"PRIu64"\n", dataFocusAddress);	      
	    }	    
	  }	    
	}

//	//	if(timeStamp == PrevTimeStamp || dataFocusAddress==1){
//	if(PrevTimeStamp == 0){
//	  memcpy(segdata+segdataFocusAddress, rawEvt->data+8*dataFocusAddress, evtSize*8);
//	  segdataFocusAddress += evtSize;
//	  PrevTimeStamp = timeStamp;
//#ifdef DEBUG
//	  if(aggregatedCounter<10){	
//	    fprintf(stdout, "dataFocusAddress = %"PRIu64" PrevTimeStamp = %"PRIu64"\n", dataFocusAddress, PrevTimeStamp);
//	  }
//#endif	  	  
//	}
//	else if(timeStamp == PrevTimeStamp){	  
//	  memcpy(segdata+segdataFocusAddress, rawEvt->data+8*dataFocusAddress, evtSize*8);
//	  segdataFocusAddress += evtSize;
//	  PrevTimeStamp = timeStamp;
//#ifdef DEBUG
//	  if(aggregatedCounter<10){	
//	    fprintf(stdout, "dataFocusAddress = %"PRIu64" PrevTimeStamp = %"PRIu64"\n", dataFocusAddress, PrevTimeStamp);
//	  }
//#endif	  
//	}
//	else{
//	  segdata[0] &= 0x00000000ffffffff;
//	  segdata[0] |= segdataFocusAddress<<32;
//
//	  babies_init_event();
//	  babies_init_segment(MKSEGID(0, 0, 0, V2740));
//	  babies_segdata((char *)segdata, segdataFocusAddress*8);
//#ifdef DEBUG	  
//	  if(aggregatedCounter<10){		  
//	    fprintf(stdout, "babies_segdata() is done.\n");
//	  }
//#endif
//	  babies_end_segment();
//	  babies_end_event();
//
//	  segdataFocusAddress=1;	  
//	  memcpy(segdata+segdataFocusAddress, rawEvt->data+8*dataFocusAddress, evtSize*8);
//	  segdataFocusAddress+=evtSize;
//	  PrevTimeStamp = timeStamp;
//	}
//	//
//
//	dataFocusAddress += evtSize;	
//	if(dataFocusAddress < aggregatedWords){
//	  dataFocusAddress += evtSize;
//	}
//	else{
//	  fprintf(stderr, "<evtloop()> ERROR : sum of event size is over AggregatedWords.\n");
//	  break;
//	}

//	if(babies_chk_block(128000)){
	if(babies_chk_block(64000)){	
	  //      if(babies_chk_block(2000000)){      
	  sca();
	  babies_flush();
	}
	clear();	      	
      }
      //      free(segdata);

      // babies_chk_block(int maxbuff)
      // if block size is larger than maxbuff,
      //  data should be send to the event builder
      //  i.e., read scaler and flush
      // example : 8000 = 16kB
//      if(babies_chk_block(4000000)){
//	  //      if(babies_chk_block(2000000)){      
//	sca();
//	babies_flush();
//      }
//      clear();	      

      break;
    case STAT_RUN_WAITSTOP:
      // for the last sequense of run
      if(babies_chk_block(2)){      
	sca();
	babies_flush();
      }
      babies_last_block();
      fprintf(stdout, "while loop stop\n");
      break;
    default:
      break;
    }
  }
    // write codes to quit safely
  fprintf(stdout, "free allocated memeories\n");
  free(rawEvt->data);
  free(rawEvt);
  free(segdata);
  //  free(tdata);
  
  //disconnect
  ec = CAEN_FELib_Close(devHandle);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot close connection with device. ec : %d\n", ec);
    return;
  }
  //

  fprintf(stdout, "evtloop stop!\n");
}

int InitV2740(void){
  int ec; //CAEN_FELib_ErrorCode;
  char value[256];
  //  uint64_t devHandle;

  //connect
  fprintf(stdout, "Init v2740\n");
//  ec = CAEN_FELib_Open("dig2://usb:21186", &devHandle);
//  if(ec != CAEN_FELib_Success){
//    fprintf(stderr, "ERROR : cannot open connection with device. ec : %d\n", ec);
//    return ec;
//  }
  //

  ec = CAEN_FELib_GetValue(devHandle, "/par/ModelName", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "ModelName : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/FPGA_FwVer", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "FPGA_FwVer : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/FwType", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "FwType : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/License", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "License : %s\n", value);  
  ec = CAEN_FELib_GetValue(devHandle, "/par/LicenseStatus", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "LicenseStatus : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/LicenseRemainingTime", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot GetValue. ec : %d\n", ec);
    return ec;
  }
  fprintf(stdout, "LicenseRemainingTime : %s\n", value);      
  

  //digitizer parameters settings
  char ioLevel[256] = "NIM";
  snprintf(value, sizeof(value), "%s", ioLevel);
  ec = CAEN_FELib_SetValue(devHandle, "/par/IOLevel", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }    
  char startSource[256] = "SWcmd";
  snprintf(value, sizeof(value), "%s", startSource);
  ec = CAEN_FELib_SetValue(devHandle, "/par/startSource", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }  
  char globalTriggerSource[256] = "SwTrg|ITLA";
  snprintf(value, sizeof(value), "%s", globalTriggerSource);
  ec = CAEN_FELib_SetValue(devHandle, "/par/GlobalTriggerSource", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char ITLAMask[256] = "0x0000000000000001";  
  //  char ITLAMask[256] = "0x0000000000000011";
  snprintf(value, sizeof(value), "%s", ITLAMask);
  ec = CAEN_FELib_SetValue(devHandle, "/par/ITLAMask", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char ITLAPairLogic[256] = "OR";
  snprintf(value, sizeof(value), "%s", ITLAPairLogic);
  ec = CAEN_FELib_SetValue(devHandle, "/par/ITLAPairLogic", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char ITLAMainLogic[256] = "OR";
  snprintf(value, sizeof(value), "%s", ITLAMainLogic);
  ec = CAEN_FELib_SetValue(devHandle, "/par/ITLAMainLogic", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }    
  char clockSource[256] = "Internal";
  snprintf(value, sizeof(value), "%s", clockSource);
  ec = CAEN_FELib_SetValue(devHandle, "/par/ClockSource", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char enClockOutFP[256] = "True";
  snprintf(value, sizeof(value), "%s", enClockOutFP);
  ec = CAEN_FELib_SetValue(devHandle, "/par/EnClockOutFP", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char busyInSource[256] = "Disabled";
  snprintf(value, sizeof(value), "%s", busyInSource);
  ec = CAEN_FELib_SetValue(devHandle, "/par/BusyInSource", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char syncOutMode[256] = "IntClk";
  snprintf(value, sizeof(value), "%s", syncOutMode);
  ec = CAEN_FELib_SetValue(devHandle, "/par/SyncOutMode", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
//  char trgOutMode[256] = "AcceptTrg";
//  char trgOutMode[256] = "Fixed1";
//  char trgOutMode[256] = "TestPulse";
  char trgOutMode[256] = "ITLA";
  snprintf(value, sizeof(value), "%s", trgOutMode);
  ec = CAEN_FELib_SetValue(devHandle, "/par/TrgOutMode", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }    
  char gpioMode[256] = "Busy";
  snprintf(value, sizeof(value), "%s", gpioMode);
  ec = CAEN_FELib_SetValue(devHandle, "/par/GPIOMode", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
//  char enDataReduction[256] = "True";
//  snprintf(value, sizeof(value), "%s", enDataReduction);
//  ec = CAEN_FELib_SetValue(devHandle, "/par/EnDataReduction", value);
//  if(ec != CAEN_FELib_Success){
//    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//    return ec;
//  }
//  char enStatEvents[256] = "True";
//  snprintf(value, sizeof(value), "%s", enStatEvents);
//  ec = CAEN_FELib_SetValue(devHandle, "/par/EnStatEvents", value);
//  if(ec != CAEN_FELib_Success){
//    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//    return ec;
//  }  
  
  char testPulsePeriod[256] = "2000";
  snprintf(value, sizeof(value), "%s", testPulsePeriod);
  ec = CAEN_FELib_SetValue(devHandle, "/par/TestPulsePeriod", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char testPulseWidth[256] = "500";
  snprintf(value, sizeof(value), "%s", testPulseWidth);
  ec = CAEN_FELib_SetValue(devHandle, "/par/TestPulseWidth", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char testPulseLowLevel[256] = "0";
  snprintf(value, sizeof(value), "%s", testPulseLowLevel);
  ec = CAEN_FELib_SetValue(devHandle, "/par/TestPulseLowLevel", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
  char testPulseHighLevel[256] = "32768";
  snprintf(value, sizeof(value), "%s", testPulseHighLevel);
  ec = CAEN_FELib_SetValue(devHandle, "/par/TestPulseHighLevel", value);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
    return ec;
  }
//  char enTriggerOverlap[256] = "False";
//  snprintf(value, sizeof(value), "%s", enTriggerOverlap);
//  ec = CAEN_FELib_SetValue(devHandle, "/par/EnTriggerOverlap", value);
//  if(ec != CAEN_FELib_Success){
//    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//    return ec;
//  }
//  char triggerIDMode[256] = "TriggerCnt";
//  snprintf(value, sizeof(value), "%s", triggerIDMode);
//  ec = CAEN_FELib_SetValue(devHandle, "/par/TriggerIDMode", value);
//  if(ec != CAEN_FELib_Success){
//    fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//    return ec;
//  }    
  //

  //Enabled ch parameters settings
  int chEnabled[] = {0};  
  //  int chEnabled[] = {0, 4};
  int sizeChEnabled = sizeof(chEnabled)/sizeof(chEnabled[0]);
  fprintf(stdout, "sizeChEnabled = %d\n", sizeChEnabled);
  //  int *chDisabled = (int*)malloc(sizeof(int)*(64-sizeChEnabled));
  int chDisabled[64];
  int idx = 0;
  
  for(int i=0;i<64;i++){
    int flag = 1;
    for(int j=0;j<sizeChEnabled;j++){
      if(i==chEnabled[j]){
	flag = 0;
      }
    }
    if(flag){
      chDisabled[idx] = i;
      idx++;
    }
  }

  fprintf(stdout, "Enabled channels:");
  for(int i=0;i<sizeChEnabled;i++){    
    fprintf(stdout, "%d ", chEnabled[i]);
  }
  fprintf(stdout, "\n");

  fprintf(stdout, "Disabled channels:");
  for(int i=0;i<64-sizeChEnabled;i++){    
    fprintf(stdout, "%d ", chDisabled[i]);
  }
  fprintf(stdout, "\n");  


  for(int i=0;i<sizeChEnabled;i++){
    char path[256];
    
    char chEnable[256] = "True";
    snprintf(value, sizeof(value), "%s",                  chEnable      );
    snprintf(path,  sizeof(path),  "/ch/%d/par/ChEnable", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
//    char itlConnect[256] = "ITLA";
//    snprintf(value, sizeof(value), "%s",                    itlConnect  );
//    snprintf(path,  sizeof(path),  "/ch/%d/par/ITLConnect", chEnabled[i]);
//    ec = CAEN_FELib_SetValue(devHandle, path, value);
//    if(ec != CAEN_FELib_Success){
//      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//      return ec;
//    }
    char waveTriggerSource[256] = "GlobalTriggerSource";
    snprintf(value, sizeof(value), "%s",                  waveTriggerSource);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveTriggerSource", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char eventTriggerSource[256] = "GlobalTriggerSource";
    snprintf(value, sizeof(value), "%s",                  eventTriggerSource);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EventTriggerSource", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }

    //    int dcOffset = 100;    
    int dcOffset = 80;
    snprintf(value, sizeof(value), "%d",                  dcOffset      );
    snprintf(path,  sizeof(path),  "/ch/%d/par/DCOffset", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    int triggerThr = 100; 
    snprintf(value, sizeof(value), "%d",                    triggerThr    );
    snprintf(path,  sizeof(path),  "/ch/%d/par/TriggerThr", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char pulsePolarity[256] = "Negative";
    snprintf(value, sizeof(value), "%s",                        pulsePolarity);
    snprintf(path,  sizeof(path),  "/ch/%d/par/PulsePolarity", chEnabled[i]  );
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveDataSource[256] = "ADC_DATA";
    //    char waveDataSource[256] = "ADC_TEST_TOGGLE";
    //    char waveDataSource[256] = "ADC_TEST_RAMP";                
    //    char waveDataSource[256] = "ADC_TEST_SIN";
    //    char waveDataSource[256] = "SquareWave";                
    snprintf(value, sizeof(value), "%s",                        waveDataSource);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveDataSource", chEnabled[i]    );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }            
    int chRecordLengthS = 1875; //125000000 MS/s -> 0.008 us/S 0.008*25000 = 200 us
    //    int chRecordLengthS = 10; //125000000 MS/s -> 0.008 us/S 0.008*25000 = 200 us    
    snprintf(value, sizeof(value), "%d",                          chRecordLengthS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/ChRecordLengthS",  chEnabled[i]    );    
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveResolution[256] = "Res8";    
    snprintf(value, sizeof(value), "%s",                        waveResolution);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveResolution", chEnabled[i]    );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }        
    int chPreTriggerS = 625;    //0.008 us*625 = 5 us
    //    int chPreTriggerS = 5;    //0.008 us*625 = 5 us    
    snprintf(value, sizeof(value), "%d",                        chPreTriggerS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/ChPreTriggerS",  chEnabled[i]    );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveSaving[256] = "Always";   
    snprintf(value, sizeof(value), "%s",                    waveSaving);
    snprintf(path,  sizeof(path),  "/ch/%d/par/waveSaving", chEnabled[i]    );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveAnalogProbe0[256] = "ADCInput";   
    snprintf(value, sizeof(value), "%s",                           waveAnalogProbe0);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveAnalogProbe0", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveAnalogProbe1[256] = "TimeFilter";   
    snprintf(value, sizeof(value), "%s",                           waveAnalogProbe1);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveAnalogProbe1", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveDigitalProbe0[256] = "Trigger";   
    snprintf(value, sizeof(value), "%s",                           waveDigitalProbe0);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveDigitalProbe0", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveDigitalProbe1[256] = "TimeFilterArmed";   
    snprintf(value, sizeof(value), "%s",                           waveDigitalProbe1);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveDigitalProbe1", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveDigitalProbe2[256] = "RetriggerGuard";   
    snprintf(value, sizeof(value), "%s",                           waveDigitalProbe2);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveDigitalProbe2", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char waveDigitalProbe3[256] = "ADCSaturation";   
    snprintf(value, sizeof(value), "%s",                           waveDigitalProbe3);
    snprintf(path,  sizeof(path),  "/ch/%d/par/WaveDigitalProbe3", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }               
    
    //    char timeFilterRiseTimeS[256] = "10"; //for emulator 
    char timeFilterRiseTimeS[256] = "250"; //for emulator 
    //    char timeFilterRiseTimeS[256] = "250";   //for GAGG signal 2 us / 0.008 us = 250
    snprintf(value, sizeof(value), "%s",                             timeFilterRiseTimeS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/TimeFilterRiseTimeS", chEnabled[i]       );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char timeFilterRetriggerGuardS[256] = "0"; //for emulator    
    //    char timeFilterRetriggerGuardS[256] = "125"; //for emulator
    //    char timeFilterRetriggerGuardS[256] = "250";       //for GAGG signal
    snprintf(value, sizeof(value), "%s",                                   timeFilterRetriggerGuardS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/TimeFilterRetriggerGuardS", chEnabled[i]             );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterRiseTimeS[256] = "250";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterRiseTimeS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterRiseTimeS",     chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterFlatTopS[256] = "125";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterFlatTopS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterFlatTopS",      chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterPeakingPosition[256] = "50";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterPeakingPosition);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterPeakingPosition",     chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterPeakingAvg[256] = "OneShot";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterPeakingAvg);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterPeakingAvg",    chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterPoleZeroS[256] = "6250";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterPoleZeroS);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterPoleZeroS",     chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
    char energyFilterFineGain[256] = "1";   
    snprintf(value, sizeof(value), "%s",                                   energyFilterFineGain);
    snprintf(path,  sizeof(path),  "/ch/%d/par/EnergyFilterFineGain",     chEnabled[i]         );        
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }                            
//    char triggerThrMode[256] = "Relative";
//    snprintf(value, sizeof(value), "%s",                        triggerThrMode);
//    snprintf(path,  sizeof(path),  "/ch/%d/par/TriggerThrMode", chEnabled[i]  );
//    ec = CAEN_FELib_SetValue(devHandle, path, value);
//    if(ec != CAEN_FELib_Success){
//      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//      return ec;
//    }
//    char selfTriggerEdge[256] = "FALL";
//    snprintf(value, sizeof(value), "%s",                         selfTriggerEdge);
//    snprintf(path,  sizeof(path),  "/ch/%d/par/selfTriggerEdge", chEnabled[i]   );
//    ec = CAEN_FELib_SetValue(devHandle, path, value);
//    if(ec != CAEN_FELib_Success){
//      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//      return ec;
//    }
//    char selfTriggerWidth[256] = "8";
//    snprintf(value, sizeof(value), "%s",                          selfTriggerWidth);
//    snprintf(path,  sizeof(path),  "/ch/%d/par/SelfTriggerWidth", chEnabled[i]    );
//    ec = CAEN_FELib_SetValue(devHandle, path, value);
//    if(ec != CAEN_FELib_Success){
//      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//      return ec;
//    }
  }  
  //  

  //Disabled ch parameters settings
  for(int i=0;i<64-sizeChEnabled;i++){
    char path[256];
    
    char chEnable[256] = "False";
    snprintf(value, sizeof(value), "%s", chEnable);
    snprintf(path,  sizeof(path),  "/ch/%d/par/ChEnable", chDisabled[i]);
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }
//    char itlConnect[256] = "Disabled";
//    snprintf(value, sizeof(value), "%s",                    itlConnect  );
//    snprintf(path,  sizeof(path),  "/ch/%d/par/ITLConnect", chDisabled[i]);
//    ec = CAEN_FELib_SetValue(devHandle, path, value);
//    if(ec != CAEN_FELib_Success){
//      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
//      return ec;
//    }        
    int triggerThr = 3277; //100 mV / 2000 mV * 2^16 = 3276.8
    snprintf(value, sizeof(value), "%d", triggerThr);
    snprintf(path,  sizeof(path),  "/ch/%d/par/TriggerThr", chDisabled[i]);
    ec = CAEN_FELib_SetValue(devHandle, path, value);
    if(ec != CAEN_FELib_Success){
      fprintf(stderr, "ERROR : cannot SetValue. ec : %d\n", ec);
      return ec;
    }      
  }
  //    

  //DAQ start setting
  ec = CAEN_FELib_SetValue(devHandle, "/endpoint/par/activeendpoint", endpoint);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetValue. ec hogehoge: %d\n", ec);
    return ec;
  }

  char dataFormat[10000] = " \
	[ \
		{ \"name\" : \"DATA\", \"type\" : \"U8\", \"dim\" : 1 }, \
		{ \"name\" : \"SIZE\", \"type\" : \"SIZE_T\" }, \
		{ \"name\" : \"N_EVENTS\", \"type\" : \"U32\" } \
	] \
";  
  uint64_t endPointHandle;
  char temp[256];
  sprintf(temp, "/endpoint/%s", endpoint);
  ec = CAEN_FELib_GetHandle(devHandle, temp, &endPointHandle);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot retrieve EndPointHandle. ec : %d\n", ec);
    return EXIT_FAILURE;
  }
  ec = CAEN_FELib_SetReadDataFormat(endPointHandle, dataFormat);
  if(ec != CAEN_FELib_Success){
    fprintf(stderr, "ERROR : cannot SetReadDataFormat. ec : %d\n", ec);
    return EXIT_FAILURE;
  }    

  ec = CAEN_FELib_GetValue(devHandle, "/par/GlobalTriggerSource", value);
  fprintf(stdout, "GlobalTriggerSource : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/WaveTriggerSource", value);
  fprintf(stdout, "WaveTriggerSource : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/EventTriggerSource", value);
  fprintf(stdout, "EventTriggerSource : %s\n", value);    
  ec = CAEN_FELib_GetValue(devHandle, "/par/TrgOutMode", value);
  fprintf(stdout, "TrgOutMode : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/BusyInSource", value);
  fprintf(stdout, "BusyInSource : %s\n", value);
  ec = CAEN_FELib_GetValue(devHandle, "/par/EnStatEvents", value);
  fprintf(stdout, "EnStatEvents : %s\n", value);  

  
  return EXIT_SUCCESS;
}

int main(int argc, char *argv[]){

  if(argc < 2){
    printf("csample EFN [uleep]\n");
    exit(0);
  }else{
    efn = strtol(argv[1], NULL, 0);
  }

  if(argc == 3){
    usl = strtol(argv[2], NULL, 0);
  }

  babies_quit(quit);
  babies_start(start);
  babies_stop(stop);
  babies_reload(reload);
  babies_evtloop(evtloop);
  babies_name("csample");

  babies_init(efn);
  babies_check();

  babies_main();

  return 0;
}
